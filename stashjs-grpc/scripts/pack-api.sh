#!/usr/bin/env bash

# This script generates a TypeScript file that contains all of the gRPC proto
# files as a single JS Buffer object.  The trick to getting this right is
# concatenating all of the files in the correct order and for this we use the
# `tsort` command (should be built into all Linux & OSX machines).

set -e # exit when a command fails
set -u # exit when script tries to use undeclared variables
set -x # trace what gets executed (useful for debugging)

trap "echo SOMETHING WENT WRONG - please read the logs above and see if it helps you figure out what is wrong - and also ask an engineer help" ERR

FILE_DESCRIPTOR_SET=./generated/stashjs-api-v1.bin
rm -f $FILE_DESCRIPTOR_SET

# Generate a single *.bin file (a binary file containing the entire gRPC API
# definition)
(cd ./grpc/v1 && protoc api.proto --include_imports --descriptor_set_out=../../$FILE_DESCRIPTOR_SET)

rm -f $FILE_DESCRIPTOR_SET.base64

# Convert the *.bin file to to base64
node - <<JS
const fs = require('fs');
fs.writeFileSync(
  '$FILE_DESCRIPTOR_SET.base64',
  fs.readFileSync('$FILE_DESCRIPTOR_SET', {encoding: 'base64'}),
  {encoding: 'utf8'}
);
JS

# Splits the file into lines of 120 chars instead one one ridiculously long line.
BASE64_LINES=$(fold -w 120 $FILE_DESCRIPTOR_SET.base64)

# Generate a TypeScript file that exports a Buffer who's content is the base64
# version of the binary gRPC API definition.
cat <<TYPESCRIPT > ./generated/stashjs-api-v1.ts
// This file is generated by scripts/pack-api.sh - DO NOT EDIT
//
// This file exports the binary definition of the CipherStash gRPC API as
// generated by \`protoc\`.  If you're looking for the plain text *.proto files
// you can find those in the dist/grpc directory of @cipherstash/stashjs-grpc

export const protoDefsBuffer: Buffer = Buffer.from(\`
$BASE64_LINES
\`, 'base64')
TYPESCRIPT

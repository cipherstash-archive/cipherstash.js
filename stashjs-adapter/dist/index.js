"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionAPI = void 0;
const stashjs_1 = require("@cipherstash/stashjs");
const uuid_1 = require("uuid");
class CollectionAPI {
    constructor(name, idNamespace) {
        // TODO: Make this return Promise<Array<T>> too
        this.query = async (...params) => ((await this.collection).query(...params));
        this.idNamespace = idNamespace;
        this.collection = stashjs_1.Stash.connect()
            .then(stash => stash.loadCollection(name));
    }
    async put(record) {
        let mappedId = (0, uuid_1.v5)(`${record.id}`, this.idNamespace);
        const cln = await this.collection;
        return await cln.put({
            ...record,
            id: mappedId,
            originalId: record.id
        });
    }
    async get(id) {
        let mappedId = (0, uuid_1.v5)(`${id}`, this.idNamespace);
        const cln = await this.collection;
        let record = await cln.get(mappedId);
        if (record) {
            return { ...record, id: id };
        }
        else {
            throw (`No record with id=${id}`);
        }
    }
    async list() {
        return await this.query({})
            .then(results => results.documents.map(record => ({ ...record, id: record.originalId })));
    }
}
exports.CollectionAPI = CollectionAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBQWdGO0FBQ2hGLCtCQUFtQztBQU9uQyxNQUFhLGFBQWE7SUFJeEIsWUFBWSxJQUFZLEVBQUUsV0FBbUI7UUE2QjdDLCtDQUErQztRQUMvQyxVQUFLLEdBQWtDLEtBQUssRUFBRSxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FDMUQsQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FDekMsQ0FBQTtRQS9CQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQTtRQUM5QixJQUFJLENBQUMsVUFBVSxHQUFHLGVBQUssQ0FBQyxPQUFPLEVBQUU7YUFDOUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBWSxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ3pELENBQUM7SUFFRCxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQVM7UUFDakIsSUFBSSxRQUFRLEdBQUcsSUFBQSxTQUFNLEVBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ3ZELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQTtRQUVqQyxPQUFPLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNuQixHQUFHLE1BQU07WUFDVCxFQUFFLEVBQUUsUUFBUTtZQUNaLFVBQVUsRUFBRSxNQUFNLENBQUMsRUFBRTtTQUN0QixDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFVO1FBQ2xCLElBQUksUUFBUSxHQUFHLElBQUEsU0FBTSxFQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQ2hELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQTtRQUNqQyxJQUFJLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUE7UUFFcEMsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLEVBQUUsR0FBRyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBa0IsQ0FBQTtTQUM3QzthQUFNO1lBQ0wsTUFBSyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxDQUFBO1NBQ2pDO0lBQ0gsQ0FBQztJQU9ELEtBQUssQ0FBQyxJQUFJO1FBQ1IsT0FBTyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2FBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FDL0MsRUFBRSxHQUFHLE1BQU0sRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLFVBQVUsRUFDbkMsQ0FBQSxDQUFDLENBQUMsQ0FBQTtJQUNMLENBQUM7Q0FDRjtBQTVDRCxzQ0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFzaCwgQ29sbGVjdGlvbiwgTWFwcGluZ3MsIE1hcHBpbmdzTWV0YSB9IGZyb20gXCJAY2lwaGVyc3Rhc2gvc3Rhc2hqc1wiXG5pbXBvcnQgeyB2NSBhcyB1dWlkdjUgfSBmcm9tICd1dWlkJ1xuXG5leHBvcnQgdHlwZSBDU1R5cGU8VD4gPSBPbWl0PFQsIFwiaWRcIj4gJiB7IG9yaWdpbmFsSWQ6IG51bWJlciwgaWQ6IHN0cmluZyB9XG50eXBlIE1hcHBpbmdzV3JhcHBlcjxUPiA9IE1hcHBpbmdzPENTVHlwZTxUPj5cbnR5cGUgTWFwcGluZ3NNZXRhV3JhcHBlcjxUPiA9IE1hcHBpbmdzTWV0YTxNYXBwaW5nc1dyYXBwZXI8VD4+XG50eXBlIENvbGxlY3Rpb25XcmFwcGVyPFQ+ID0gQ29sbGVjdGlvbjxDU1R5cGU8VD4sIE1hcHBpbmdzV3JhcHBlcjxUPiwgTWFwcGluZ3NNZXRhV3JhcHBlcjxUPj5cblxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb25BUEk8VCBleHRlbmRzIHsgaWQ6IG51bWJlciB9PiB7XG4gIGNvbGxlY3Rpb246IFByb21pc2U8Q29sbGVjdGlvbldyYXBwZXI8VD4+O1xuICBpZE5hbWVzcGFjZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgaWROYW1lc3BhY2U6IHN0cmluZykge1xuICAgIHRoaXMuaWROYW1lc3BhY2UgPSBpZE5hbWVzcGFjZVxuICAgIHRoaXMuY29sbGVjdGlvbiA9IFN0YXNoLmNvbm5lY3QoKVxuICAgICAgLnRoZW4oc3Rhc2ggPT4gc3Rhc2gubG9hZENvbGxlY3Rpb248Q1NUeXBlPFQ+PihuYW1lKSlcbiAgfVxuXG4gIGFzeW5jIHB1dChyZWNvcmQ6IFQpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGxldCBtYXBwZWRJZCA9IHV1aWR2NShgJHtyZWNvcmQuaWR9YCwgdGhpcy5pZE5hbWVzcGFjZSlcbiAgICBjb25zdCBjbG4gPSBhd2FpdCB0aGlzLmNvbGxlY3Rpb25cblxuICAgIHJldHVybiBhd2FpdCBjbG4ucHV0KHtcbiAgICAgIC4uLnJlY29yZCxcbiAgICAgIGlkOiBtYXBwZWRJZCxcbiAgICAgIG9yaWdpbmFsSWQ6IHJlY29yZC5pZFxuICAgIH0pXG4gIH1cblxuICBhc3luYyBnZXQoaWQ6IG51bWJlcik6IFByb21pc2U8VD4ge1xuICAgIGxldCBtYXBwZWRJZCA9IHV1aWR2NShgJHtpZH1gLCB0aGlzLmlkTmFtZXNwYWNlKVxuICAgIGNvbnN0IGNsbiA9IGF3YWl0IHRoaXMuY29sbGVjdGlvblxuICAgIGxldCByZWNvcmQgPSBhd2FpdCBjbG4uZ2V0KG1hcHBlZElkKVxuXG4gICAgaWYgKHJlY29yZCkge1xuICAgICAgcmV0dXJuIHsgLi4ucmVjb3JkLCBpZDogaWQgfSBhcyB1bmtub3duIGFzIFRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3coYE5vIHJlY29yZCB3aXRoIGlkPSR7aWR9YClcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPOiBNYWtlIHRoaXMgcmV0dXJuIFByb21pc2U8QXJyYXk8VD4+IHRvb1xuICBxdWVyeTogQ29sbGVjdGlvbldyYXBwZXI8VD5bXCJxdWVyeVwiXSA9IGFzeW5jICguLi5wYXJhbXMpID0+IChcbiAgICAoYXdhaXQgdGhpcy5jb2xsZWN0aW9uKS5xdWVyeSguLi5wYXJhbXMpXG4gIClcblxuICBhc3luYyBsaXN0KCk6IFByb21pc2U8QXJyYXk8VD4+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5xdWVyeSh7fSlcbiAgICAudGhlbihyZXN1bHRzID0+IHJlc3VsdHMuZG9jdW1lbnRzLm1hcChyZWNvcmQgPT4gKFxuICAgICAgeyAuLi5yZWNvcmQsIGlkOiByZWNvcmQub3JpZ2luYWxJZCB9IGFzIHVua25vd24gYXMgVFxuICAgICkpKVxuICB9XG59XG5cbiJdfQ==